{"mappings":";;;;;;;;;ACAA;;AAWA,MAAM,+BAAS,GAAG,SAAU,EAAO,EAAE;IACjC,OAAQ,WAAW;QACf,OAAO,EAAE,CAAA;KACZ,CAAA;CACJ,AAAC;AACK,MAAM,yCAAW,GAAG,CAAC,aAAkB,EAAE,QAAa,EAAE,OAAY,GAAK;IAC5E,IAAI,OAAO,GAAY,EAAE,EAAE,OAAO,GAAO,EAAE,EAAE,MAAM;IACnD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,MAAW,GAAI;QAC1C,MAAM,QAAQ,GAAG,IAAI,yBAAa,CAAC,CAAC,CAAC;QACrC,MAAM,YAAY,GAAG,CAAC,IAAS,GAAK,oBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;QAAA;QACtE,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,eAAG,CAAC,YAAY,CAAC,CAAC;QACxD,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,AAAK,GAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAAA;KAC1D,CAAC;IACF,MAAM,GAAG,IAAI,2BAAe,CAAC,aAAa,CAAC,CAAC,IAAI,CAC5C,qBAAS,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EACpC,gBAAI,CAAC,CAAC,KAAU,EAAE,OAAY,GAAK,OAAO,CAAC,KAAK,CAAC;IAAA,CAAC,EAClD,gCAAoB,CAAC,CAAC,GAAQ,EAAE,GAAQ,GAAK;QACzC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;KAAC,CAAC,CAC3D;IAED,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CACxB,eAAG,CAAC,CAAC,KAAU,GACX,MAAM,CAAC,MAAM,CACT,EAAE,KACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAA,GAAG,GAAI;YAC/B,OAAO;gBAAC,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;aAAC,CAAA;SACtC,CAAC,CACL;IAAA,CACJ,EACD,gCAAoB,CAAC,CAAC,GAAQ,EAAE,GAAQ,GAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;IAAA,CAAC,CAC5F;IACD,OAAO;QA1CX,QA0CY,MAAM;QA1ClB,SA0CoB,OAAO;QA1C3B,UA0C6B,QAAQ;KAAC,CAAA;CACrC;AAEM,MAAM,yCAAW,GAAG,CAAC,MAAc,EAAE,UAA2B,GAAK;IACxE,OAAO,UAAU,CAAC,IAAI,CAClB,wBAAY,CAAC,IAAI,CAAC,EAClB,gBAAI,CAAC,CAAC,SAAc,EAAE,SAAc,GAAK;QACrC,OAAO,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAEnC,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,iCAAiC,CAAC,EAAE,SAAS,CAAC;QAC7E,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,iCAAiC,CAAC,EAAE,SAAS,CAAC;QAE7E,OAAO,CAAC,QAAQ,EAAE;QAClB,OAAO,SAAS,CAAA;KACnB,CAAC,CACL,CAAC,SAAS,EAAE,CAAA;CAChB;;AD1DD","sources":["src/index.ts","src/brass-core.ts"],"sourcesContent":["export { createBrass, brassLogger } from \"./brass-core\";","import { BehaviorSubject, distinctUntilChanged, scan, map, mergeWith, Observable, ReplaySubject,debounceTime, skip } from 'rxjs'\nimport { produce, current} from \"immer\"\n\nexport interface Store {\n    state: {[key: string]: any},\n    action: {[key: string]: any},\n}\n\nexport interface Streams {\n    [key: string]: Observable<any>\n}\nconst currying2 = function (fn: any) {\n    return  function() {\n        return fn\n    }\n};\nexport const createBrass = (initial_state: any, reducers: any, getters: any) => { \t\t\t      \n    let streams: Streams = {}, actions:any = {}, state$\n    Object.keys(reducers).forEach((action: any) =>{\n        const subject$ = new ReplaySubject(1) \t\n        const streamAction = (args: any) => produce(reducers[action](...args))\n        streams[`${action}$`] = subject$.pipe(map(streamAction))\t\n        actions[action] = (...args: any) => subject$.next(args)\n    })\n    state$ = new BehaviorSubject(initial_state).pipe(      \n        mergeWith(...Object.values(streams)),\t\t\t\t\t          \n        scan((state: any, reducer: any) => reducer(state)),\n        distinctUntilChanged((pre: any, cur: any) => { \n            return JSON.stringify(pre) === JSON.stringify(cur)}),\n    )\t\n\n    const getters$ = state$.pipe(\n        map((state: any) =>\n            Object.assign(\n                {},\n                ...Object.keys(getters).map(key => {\n                    return {[key]: getters[key](state)}\n                })\n            )\n        ),\n        distinctUntilChanged((pre: any, cur: any) => JSON.stringify(pre) === JSON.stringify(cur)),\n    ) \n    return {state$, actions, getters$} \t\t\t\t\t\t\t\t\t\t               \n} \n\nexport const brassLogger = (prefix: string, observable: Observable<any>) => {\n    return observable.pipe(\n        debounceTime(1000),\n        scan((prevState: any, nextState: any) => {\n            console.groupCollapsed(`${prefix}`)\n        \n            console.log(`%c prev state:`, `color: #999999; font-weight: bold`, prevState)\n            console.log(`%c next state:`, `color: #4CAF50; font-weight: bold`, nextState)\n        \n            console.groupEnd()\n            return nextState\n        })\n    ).subscribe()\n}"],"names":[],"version":3,"file":"main.js.map"}